<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Fireworks Generator</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background-color: #000;
            cursor: pointer;
        }
        canvas {
            display: block;
        }
        .info {
            position: absolute;
            top: 10px;
            left: 10px;
            color: white;
            font-family: 'Inter', sans-serif;
            font-size: 14px;
            background-color: rgba(0,0,0,0.5);
            padding: 8px 12px;
            border-radius: 8px;
            pointer-events: none;
            text-align: center;
        }
    </style>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet">
</head>
<body>
    <div class="info">Click or Tap to launch a firework and give it a ✨ special name!</div>
    <canvas id="fireworksCanvas"></canvas>

    <script>
        const canvas = document.getElementById('fireworksCanvas');
        const ctx = canvas.getContext('2d');
        
        let fireworks = [];
        let particles = [];
        let textMessages = [];
        let hue = 120; // Start with green

        // Set canvas to full screen
        function setCanvasSize() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        }
        setCanvasSize();

        // Handle window resize
        window.addEventListener('resize', setCanvasSize);

        // Utility function for random numbers
        function random(min, max) {
            return Math.random() * (max - min) + min;
        }

        // Represents a floating text message
        class TextMessage {
            constructor(text, x, y, hue) {
                this.text = text;
                this.x = x;
                this.y = y;
                this.alpha = 1;
                this.decay = 0.01;
                this.hue = hue;
            }

            update() {
                this.y -= 0.5; // Move up slowly
                this.alpha -= this.decay;
                return this.alpha <= this.decay;
            }

            draw() {
                ctx.save();
                ctx.globalAlpha = this.alpha;
                ctx.fillStyle = `hsl(${this.hue}, 100%, 80%)`;
                ctx.font = 'bold 20px "Inter", sans-serif';
                ctx.textAlign = 'center';
                ctx.shadowColor = `hsl(${this.hue}, 100%, 50%)`;
                ctx.shadowBlur = 10;
                ctx.fillText(this.text, this.x, this.y);
                ctx.restore();
            }
        }
        
        // Represents a single firework rocket
        class Firework {
            constructor(startX, startY, endX, endY, isUserLaunched = false) {
                this.x = startX;
                this.y = startY;
                this.startX = startX;
                this.startY = startY;
                this.endX = endX;
                this.endY = endY;
                this.isUserLaunched = isUserLaunched;
                this.distanceToEnd = this.calculateDistance(startX, startY, endX, endY);
                this.distanceTraveled = 0;
                this.angle = Math.atan2(endY - startY, endX - startX);
                this.speed = 2;
                this.acceleration = 1.05;
                this.brightness = random(50, 70);
                this.trail = [];
            }

            calculateDistance(x1, y1, x2, y2) {
                const xDistance = x1 - x2;
                const yDistance = y1 - y2;
                return Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2));
            }

            update() {
                this.trail.push({ x: this.x, y: this.y });
                if (this.trail.length > 5) {
                    this.trail.shift();
                }

                this.speed *= this.acceleration;
                const vx = Math.cos(this.angle) * this.speed;
                const vy = Math.sin(this.angle) * this.speed;
                this.distanceTraveled = this.calculateDistance(this.startX, this.startY, this.x + vx, this.y + vy);

                if (this.distanceTraveled >= this.distanceToEnd) {
                    return true; // Reached destination
                } else {
                    this.x += vx;
                    this.y += vy;
                    return false;
                }
            }

            draw() {
                ctx.beginPath();
                const lastTrailPoint = this.trail[this.trail.length - 1] || { x: this.x, y: this.y };
                ctx.moveTo(lastTrailPoint.x, lastTrailPoint.y);
                ctx.lineTo(this.x, this.y);
                ctx.strokeStyle = `hsl(${hue}, 100%, ${this.brightness}%)`;
                ctx.stroke();
            }
        }

        // Represents a single particle from an explosion
        class Particle {
            constructor(x, y, hue) {
                this.x = x;
                this.y = y;
                this.angle = random(0, Math.PI * 2);
                this.speed = random(1, 10);
                this.friction = 0.95;
                this.gravity = 1;
                this.hue = hue;
                this.brightness = random(50, 80);
                this.alpha = 1;
                this.decay = random(0.015, 0.03);
                this.trail = [];
            }

            update() {
                this.trail.push({ x: this.x, y: this.y });
                if (this.trail.length > 5) {
                    this.trail.shift();
                }
                
                this.speed *= this.friction;
                this.x += Math.cos(this.angle) * this.speed;
                this.y += Math.sin(this.angle) * this.speed + this.gravity;
                this.alpha -= this.decay;
                
                return this.alpha <= this.decay;
            }

            draw() {
                ctx.beginPath();
                const lastTrailPoint = this.trail[this.trail.length - 1] || { x: this.x, y: this.y };
                ctx.moveTo(lastTrailPoint.x, lastTrailPoint.y);
                ctx.lineTo(this.x, this.y);
                ctx.strokeStyle = `hsla(${this.hue}, 100%, ${this.brightness}%, ${this.alpha})`;
                ctx.stroke();
            }
        }

        function createParticles(x, y, hue) {
            const particleCount = 100;
            for (let i = 0; i < particleCount; i++) {
                particles.push(new Particle(x, y, hue));
            }
        }
        
        function launchFirework(targetX, targetY, isUserLaunched = false) {
            const startX = canvas.width / 2;
            const startY = canvas.height;
            fireworks.push(new Firework(startX, startY, targetX, targetY, isUserLaunched));
        }

        function hueToColorName(h) {
            h = h % 360;
            if (h < 30) return 'Red';
            if (h < 60) return 'Orange';
            if (h < 90) return 'Yellow';
            if (h < 150) return 'Green';
            if (h < 210) return 'Cyan';
            if (h < 270) return 'Blue';
            if (h < 300) return 'Purple';
            if (h < 330) return 'Magenta';
            return 'Red';
        }

        // ✨ Gemini API Integration
        async function generateFireworkName(colorName, x, y, hue) {
            const userQuery = `You are a pyrotechnics expert and a poet. Generate a short, creative, and evocative name for a firework that explodes in a beautiful ${colorName} color. The name should be 2-4 words long. Do not use quotes or any other punctuation in the name. Just return the name.`;
            const apiKey = ""; // API key is handled by the environment
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
            
            try {
                const payload = {
                    contents: [{ parts: [{ text: userQuery }] }],
                };

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    console.error('API call failed with status:', response.status);
                    return;
                }

                const result = await response.json();
                const candidate = result.candidates?.[0];

                if (candidate && candidate.content?.parts?.[0]?.text) {
                    const fireworkName = candidate.content.parts[0].text.trim();
                    textMessages.push(new TextMessage(`✨ ${fireworkName} ✨`, x, y, hue));
                }
            } catch (error) {
                console.error('Error calling Gemini API:', error);
            }
        }

        // Main animation loop
        function animate() {
            // Use a semi-transparent background for a motion blur effect
            ctx.globalCompositeOperation = 'destination-out';
            ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            ctx.globalCompositeOperation = 'lighter';
            
            // Update and draw fireworks
            for (let i = fireworks.length - 1; i >= 0; i--) {
                fireworks[i].draw();
                if (fireworks[i].update()) {
                    const fw = fireworks[i];
                    createParticles(fw.endX, fw.endY, hue);
                    if (fw.isUserLaunched) {
                        const colorName = hueToColorName(hue);
                        generateFireworkName(colorName, fw.endX, fw.endY, hue);
                    }
                    fireworks.splice(i, 1);
                }
            }

            // Update and draw particles
            for (let i = particles.length - 1; i >= 0; i--) {
                particles[i].draw();
                if (particles[i].update()) {
                    particles.splice(i, 1);
                }
            }

            // Update and draw text messages
            for (let i = textMessages.length - 1; i >= 0; i--) {
                textMessages[i].draw();
                if (textMessages[i].update()) {
                    textMessages.splice(i, 1);
                }
            }


            hue += 0.5;
            requestAnimationFrame(animate);
        }

        // Launch fireworks automatically
        setInterval(() => launchFirework(random(0, canvas.width), random(0, canvas.height / 2), false), 2000);

        // Launch fireworks on click/tap
        canvas.addEventListener('mousedown', (e) => {
            launchFirework(e.clientX, e.clientY, true);
        });
        
        canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            const touch = e.touches[0];
            launchFirework(touch.clientX, touch.clientY, true);
        });
        
        // Start the animation
        animate();
    </script>
</body>
</html>

